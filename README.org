* AURIS
  :PROPERTIES:
  :CUSTOM_ID: auris
  :END:

A new, open source mission control system in Haskell

A mission control system is the ground software that controls satellites
and space probes. An example of an actual operational system can be seen
here (example from the European Space Operations Center ESOC, on the
monitors):
[[https://www.esa.int/ESA_Multimedia/Images/2015/08/Mission_control_system][ESA's
SCOS-2000]] or from the German Space Operations Center (GSOC):
[[https://www.aerosieger.de/images/news_picupload/pic_sid13250-1-norm.jpg][DLR
GECCOS]]

** First Screenshots
   :PROPERTIES:
   :CUSTOM_ID: first-screenshots
   :END:

Please note that these screenshots are preliminary. The displays are
still subject to major changes, also most implementations are not
complete.

Telemetry Frame Display:

#+CAPTION: TM Frame Display
[[file:screenshots/TMFrames.png]]

Telemetry Packet Display:

#+CAPTION: TM Packet Display
[[file:screenshots/TMPackets.png]]

Graphical Parameter Display:

#+CAPTION: TM Parameter Display
[[file:screenshots/GRD.png]]

The commanding interface currently is a very simple implementation to be
able to send commands to every interface in the system. The commands
currently are specified in textual form, so the GUI for this is minimal:

#+CAPTION: Commanding
[[file:screenshots/Commanding.png]]

The *TC History* is also very fresh and not completely implemented and
does not yet show all necessary information:

#+CAPTION: TC History
[[file:screenshots/TCHistory.png]]

Connections Tab:

#+CAPTION: Connections display
[[file:screenshots/Connections.png]]

** Building
   :PROPERTIES:
   :CUSTOM_ID: building
   :END:

Currently, building via stack is recommended. Cabal new-* commands
should also work, but currently there is no cabal.project file
available.

In the current project, FLTK has been replaced by GTK. Therefore the
dependencies required by the Haskell library =gi-gtk=

There are 3 stack.yaml files provided:
 - stack.yaml: this is for developing with non-optimized code
 - stack_opt.yaml: this is for the optimized build (much slower)
 - stack_llvm:yaml: optimized build via LLVM (much much slower)

*** Using nix
    :PROPERTIES:
    :CUSTOM_ID: using-nix
    :END:

*Note*: this section must be re-checked!

This project can also be built using =nix-build=. This will use
[[file:haskell.nix][https://github.com/input-output-hk/haskell.nix]] to
derive nix expressions from the =stack.yaml= and then build the local
packages using the same versions as in the stackage =resolver= and
=extra-deps=. However many of the packages might not be pre-built, but
you can try to use =cachix= from =iohk=:

#+BEGIN_SRC sh
  cachix use iohk
  nix-build -A esa-space-protocols.components.all
  ls result/bin
  # CommandingAD  CommandingTest  EventLoggingDBTest  TMModelTest  TMSimulatorTest  WriteConfig
#+END_SRC

There is also a =shell.nix= which provides build tools and dependencies
like =ghc=, =cabal= and =stack= and =ghcide=. Inside the shell you can
build using =cabal= and =stack --no-nix --system-ghc --no-install-ghc=,
or let =stack --nix= use the =shell.nix= (but this requires =stack= on
your host system).

If you have [[file:lorri][https://github.com/target/lorri]] set up, you
get this things even set up when cd'ing in this environment!

** Data Processing
   :PROPERTIES:
   :CUSTOM_ID: data-processing
   :END:

The architecture of the data processing backend looks like this:

[[./architecture.svg]]

The real code is a bit more involved and complicated and is constantly
growing. All data processing is currently done in =esa-space-protocols=
which is the main library.

** User Interface
   :PROPERTIES:
   :CUSTOM_ID: user-interface
   :END:

The libraries are designed so that they will be able to be used in a
variety of situations: client/server, standalone as one binary, use the
libraries alone in other projects etc.

A standalone executable with a GUI is called AURISi (for AURIS
integrated) in the 'aurisi' directory.

The AURISi executable uses GTK for the graphical user interface.

* More Information

There is more information available (restructuring and growing) on the Wiki on github: [[https://github.com/oswald2/AURIS/wiki][wiki]]

** Database
   :PROPERTIES:
   :CUSTOM_ID: database
   :END:

There is a preliminary implementation of a DB backend for events (thanks
to Paolo and Matthias), as well as for TM Frames, but they are currently not used in AURISi. This is a task for later

The idea is to support at least 2 backends: sqlite for testing campaigns
and Postgres for MCS/CCS activities.

** Satellite Information Base
   :PROPERTIES:
   :CUSTOM_ID: satellite-information-base
   :END:

Currently the MIB library is under work to load satellite information
from a MIB in SCOS-2000 Format (Version 6.9). It may be, that a CDM
library for EGS-CC based configurations will follow (probably).

** Protocols
   :PROPERTIES:
   :CUSTOM_ID: protocols
   :END:

The currently working protocols are NCTRS (TC and TM, no ADMIN currently and no AD mode), C&C and EDEN. Since NCTRS is not that common
anymore, other protocols will also be supported.

Work has already begun on the implementation of an SLE library, to be
able to connect to ground stations without relay/routing software as for
NCTRS. The SLE implementation is in a very early state and currently not
usable and can be found here:
[[https://github.com/oswald2/esa-sle][esa-sle]]

** Notes
   :PROPERTIES:
   :CUSTOM_ID: notes
   :END:

- The [[https://github.com/gregorycollins/hashtables][hashtables]]
  library has been forked and directly put into this mono-repo. What has
  been modified is that an immutable hash table type has been added (but
  only for the Basic ST hash table), which can be obtained by calling
  =unsafeFreeze=. This allows to pass the HashTable out of the ST monad,
  but also only read-only functions are allowed. Currently, only
  =ilookup=, =fold= and =toList= are implemented.
- The timer functionality is still undecided.
- State machines need more research. Combining state machines with STM and timers is quite challenging. This is needed for the COP-1 machine for AD mode as well as for the Verification timers and the OBQM implementation.

** Contributing

All contributions are welcome, though I am aware that there is quite an entry hurdle as the topic of mission control is a very 
niche topic and there is not really much broad knowledge available. Things to implement can be found on the Issues page on github.
They are often broader topics, which should be split into sub-tasks before. I try to keep them up-to-date as far as possible. 

As this is not a simple topic, please ask questions. For issues, this can be directly done in the Issues pages or on the dedicated 
Discord server for the system: [[https://discord.gg/jEdJxfVd][Discord]].

See the file [[CONTRIBUTING.md][CONTRIBUTING.md]] on how to contribute.